name: "Terraform"

on:
  workflow_dispatch:
    inputs:
      tf-composition:
        type: choice
        description: "Directory where the Terraform composition is located."
        required: true
        options:
          - "tf-aks"
      cluster:
        type: choice
        description: "Cluster Tfvars file to run"
        required: true
        options:
          - prod

permissions:
  contents: read
  id-token: write

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  TerraformBackendResourceGroup: "juan-gil-tf"
  TerraformBackendStorageAccount: "tfstatest00"
  TerraformBackendStorageContainer: "${{ inputs.tf-composition }}-${{ inputs.cluster }}"
  TerraformBackendStorageKey: "${{ inputs.tf-composition }}-${{ inputs.cluster }}.tfstate"

jobs:
  pre_commit_validate:
    runs-on: ubuntu-latest
    name: "Verify"
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Terraform
        id: install
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt install terraform

      - name: Validate remote backend
        working-directory: "./${{ inputs.tf-composition }}"
        run: cat versions.tf | grep -P '^  backend "azurerm" {$'

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

  terraform_plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.cluster }}
    name: "Terraform Plan"
    needs: [pre_commit_validate]
    defaults:
      run:
        shell: bash
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load Application ID secret
        run: |
          if [ -n "$ARM_CLIENT_ID" ]; then
            echo "Confirmed, Client ID is loaded"
          else
            echo "Client ID not existing" && exit 1
          fi

      - name: ðŸ›‚ AzureCLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run Az Command for Test
        run: |
          az account show

      - name: Install Terraform
        id: install
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt install terraform

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=storage_account_name="$TerraformBackendStorageAccount" -backend-config=container_name="$TerraformBackendStorageContainer" -backend-config=key="$TerraformBackendStorageKey" -backend-config=resource_group_name="$TerraformBackendResourceGroup"
        working-directory: "./${{ inputs.tf-composition }}"
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=${{ inputs.cluster }}.tfvars -input=false -out tf.plan
        working-directory: "./${{ inputs.tf-composition }}"
        shell: bash

      - name: Terraform Show
        id: show
        run: terraform show tf.plan 2>&1 > /tmp/plan.txt
        working-directory: "./${{ inputs.tf-composition }}"
        shell: bash

  terraform_apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    environment: ${{ inputs.cluster }}
    defaults:
      run:
        shell: bash
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Load Application ID secret
        run: |
          if [ -n "$ARM_CLIENT_ID" ]; then
            echo "Confirmed, Client ID is loaded"
          else
            echo "Client ID not existing" && exit 1
          fi

      - name: ðŸ›‚ AzureCLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=storage_account_name="$TerraformBackendStorageAccount" -backend-config=container_name="$TerraformBackendStorageContainer" -backend-config=key="$TerraformBackendStorageKey" -backend-config=resource_group_name="$TerraformBackendResourceGroup"
        working-directory: "./${{ inputs.tf-composition }}"
        shell: bash

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: "./${{ inputs.tf-composition }}"
